package designPattern.mediator;

/**
 * 仲裁者模式：只有一个仲裁者，其他都是接收请求和处理请求的处理者（或者叫组员，仲裁者和它的组员们）。
 *          但是只有仲裁者拥有一个请求和处理者之间的对照表，处理者接收到请求后（如果不能自己处理），就要都交给仲裁者，
 *          仲裁者根据对照表找出应该处理这个请求的是谁（或者仲裁者取获取需要获取的状态，然后判断处理这个请求的应该是谁），
 *          仲裁者再把请求分给处理者处理（调用处理者和仲裁者之间的通信方法），有时还会告诉处理者应该怎样处理。
 *
 *          仲裁给谁处理的这部分代码集中在仲裁者这里，如果有bug或者需要修改分配给谁的逻辑，只需要修改仲裁者，与其他处理者都没有关系，
 *          也就是说其他处理者的代码是独立可复用性强的。如果没有仲裁者，每个处理者收到请求后都要取判断一遍谁处理，就很冗余和相互之间强关联，破坏了组件复用性。
 */
public class Main {
    public static void main (String[] args) {
        new LoginFrame("Mediator Sample");
    }
}
